Q1. Implement a stack library (ststack.h) of integers using a static 
implementation of the stack and implementing the operations like init(S), 
S=push(S) and S=pop(S). Write a driver program that includes stack library 
and calls different stack operations

#include<stdio.h>
#define MAX 15
 
char name[MAX],top;
 
void init()
{
    top=-1;
    printf("\nStatic Stack Initiaized\n");
}
 
void push()
{
    if(top==MAX-1)
    {
        printf("\nStatic Stack is full\n");
    }
    else
    {
        top++;
        printf("Enter a character to be push:");
        scanf(" %c",&name[top]);
    }
}
 
void pop()
{
    if(top==-1)
    {
        printf("\nStatic Stack is empty\n");
    }
    else
    {
        printf("Poped value is:%c",name[top]);
        top--;
    }
}
 

Save this above code in the stack library file as ststack.h

#include<stdio.h>
#include<stdlib.h>
#include "ststack.h"
int main()
{
    int ch;
    while(1)
    {
        printf("\n-----Static Stack of characters-----\n");
        printf("\n1.Init\n");
        printf("2.Push\n");
        printf("3.Pop\n");
        printf("4.Exit\n");
        printf("Enter your choice: ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:init();  break;
            case 2:push(); break;
            case 3:pop(); break;
            case 4:exit(0);
      case 7:exit(0);
        }
    }
}
Save this file as stack.c and compile and run the stack.c

Output: 

-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 1

Static Stack Initiaized

-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 2
Enter a character to be push:10

-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice:
-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 5

Static Stack is not empty

-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 6

Static Stack is not full

-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 2
Enter a character to be push:3

-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 3
Poped value is:3
-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 10

-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 4
Character at top is:1
-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 1

Static Stack Initiaized

-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 10

-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 2
Enter a character to be push:5

-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 4
Character at top is:5
-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 7

---------------------------------------------------------------------------------------------------------------------------------------------

Q2. Write a program that sorts the elements of linked list using bubble sort 
technique.

#include <stdio.h>
#include <stdlib.h>


struct Node {
	int data;
	struct Node* next;
} Node;

struct Node* swap(struct Node* ptr1, struct Node* ptr2)
{
	struct Node* tmp = ptr2->next;
	ptr2->next = ptr1;
	ptr1->next = tmp;
	return ptr2;
}


int bubbleSort(struct Node** head, int count)
{
	struct Node** h;
	int i, j, swapped;

	for (i = 0; i <= count; i++) {

		h = head;
		swapped = 0;

		for (j = 0; j < count - i - 1; j++) {

			struct Node* p1 = *h;
			struct Node* p2 = p1->next;

			if (p1->data > p2->data) {

				*h = swap(p1, p2);
				swapped = 1;
			}

			h = &(*h)->next;
		}

		
		if (swapped == 0)
			break;
	}
}


void printList(struct Node* n)
{
	while (n != NULL) {
		printf("%d -> ", n->data);
		n = n->next;
	}
	printf("\n");
}


void insertAtTheBegin(struct Node** start_ref, int data)
{
	struct Node* ptr1
		= (struct Node*)malloc(sizeof(struct Node));

	ptr1->data = data;
	ptr1->next = *start_ref;
	*start_ref = ptr1;
}

int main()
{
	int arr[] = { 78, 20, 10, 32, 1, 5 };
	int list_size, i;

	struct Node* start = NULL;
	list_size = sizeof(arr) / sizeof(arr[0]);

	
	for (i = 0; i < list_size; i++)
		insertAtTheBegin(&start, arr[i]);

	
	printf("Linked list before sorting\n");
	printList(start);

	
	bubbleSort(&start, list_size);

	
	printf("Linked list after sorting\n");
	printList(start);

	return 0;
}
















