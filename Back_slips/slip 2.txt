Q1. Implement a list library (singlylist.h) for a singly linked list of integer 
 with the operations create, display. Write a menu driven program to call 
 these operations

#include<stdio.h>
#include<stdlib.h>
 
struct node
{
    char data;
    struct node *next;
}*start;
 
void create()
{
    struct node *temp,*q;
    temp=(struct node *)malloc(sizeof(struct node));
    printf("\nEnter the character:");
    scanf(" %c",&temp->data);
    temp->next=NULL;
 
    if(start==NULL)
    {
        start=temp;
    }
    else
    {
        q=start;
        while(q->next!=NULL)
        {
            q=q->next;
        }
        q->next=temp;
    }
}
 
void delete()
{
 
    struct node *temp,*p;
    int pos,t;
    printf("\nEnter the position:");
        scanf("%d",&pos);
    t=1;
    temp=start;
 
 
    if(pos==1)
    {
        start=start->next;
        free(temp);
        printf("\nNode Deleted Successfully\n");
        return;
    }
 
    while(t< pos-1)
    {
            temp=temp->next;
            t++;
    }
    p=temp->next;
    temp->next=p->next;
    free(p);
    printf("\nNode Deleted Successfully\n");
}
 
void display()
{
    struct node *temp;
    printf("The Linked List : \n");
    temp=start;
    while(temp!=NULL)
    {
        printf("%c->",temp->data);
        temp=temp->next;
    }
    printf("NULL");
}



Save this above code in the stack library file as singlylist.h

#include<stdio.h>
#include "sll.h"
int main()
{
    int ch;
    start=NULL;
    while(1)
    {
        printf("\n1.Create\n");
        printf("2.Delete\n");
        printf("3.Display\n");
        printf("4.Exit\n");
        printf("Enter your choice: ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:create();  break;
            case 2:delete();  break;            
            case 3:display(); break;
            case 4:exit(0);
        }
    }
}

Save this file as linkedlist.c and compile and run the linkedlist.c

Output:

1.Create
2.Delete
3.Display
4.Exit
Enter your choice: 1

Enter the character:a

1.Create
2.Delete
3.Display
4.Exit
Enter your choice: 3
The Linked List :
a->NULL
1.Create
2.Delete
3.Display
4.Exit
Enter your choice: 1

Enter the character:b

1.Create
2.Delete
3.Display
4.Exit
Enter your choice: 3
The Linked List :
a->b->NULL
1.Create
2.Delete
3.Display
4.Exit
Enter your choice: 2

Enter the position:2

Node Deleted Successfully

1.Create
2.Delete
3.Display
4.Exit
Enter your choice: 3
The Linked List :
a->NULL
1.Create
2.Delete
3.Display
4.Exit
Enter your choice: 4


-----------------------------------------------------------------------------------------------------------------------------------------

Q2. Write a program that copies the contents of one stack into another. Use 
 stack library to perform basic stack operations. The order of two stacks 
 must be identical.(Hint: Use a temporary stack to preserve the order). 
 
#include<stdio.h>

#include "slip22-stack.h"

int main(void)

{

    stack s1,t,s2;

    init(&s1);

    init(&s2);

    init(&t);

    int i,n,num;

    printf("How many elements in stack1: ");

    scanf("%d",&n);

    printf("Enter element in stack1: ");

    for(i=0;i<n;i++)

    {

        scanf("%d",&num);

        push(&s1,num);   //pushing elements in stack1

    }

    while(!isempty(&s1))

     {

         push(&t,pop(&s1));   //pushing stack1 elements in temporary stack

     }

    while(!isempty(&t))

     {

         push(&s1,peek(&t));   //pushing temporary stack element in stack1

         push(&s2,pop(&t));    //pushing temporary stack element in stack2

     }

     printf("\n-----Elements of stack1 is copied in stack2------\n");
printf("%d",s2);
}

stack.h----


---->save the file  (stack.h)
typedef struct stack
{
    int data[200];
    int top;
} stack;
void push(stack *ps,int num)
{
    ps->data[++ps->top]=num;
}
int pop(stack *ps)
{
    int num;
    num=ps->data[ps->top--];
    return num;
}
int isempty(stack *ps)
{
    if(ps->top==-1)
        return 1;
    return 0;
}
int isfull(stack *ps)
{
    if(ps->top==20-1)
        return 1;
    return 0;
}
int peek(stack *ps)
{
return ps->data[ps->top];
}
int init(stack *ps)
{
    ps->top=-1;
}