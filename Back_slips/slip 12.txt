Q1. Read the data from file 'cities.txt' containing names of cities and their STD 
codes. Accept a name of the city from user and use linear search algorithm to 
check whether the name is present in the file and output the STD code, 
otherwise output “city not in the list”. 

#include<stdio.h>
#include<string.h>
 
typedef struct city
{
                char cname[20];
                int stdcode;
}rec;
rec city[100];
int read_file(rec *a)
{
                int i=0;
                FILE *fp;
                if((fp=fopen("cities.txt","r"))!=NULL)
                {
                                while(!feof(fp))
                                {
                                                fscanf(fp,"%s%d",a[i].cname,&a[i].stdcode);
                                                i++;
                                }}
                return (i-1);
}
 
void l_search(rec *a,int n,char x[20])
{
                int i;
                for(i=0;i<n;i++)
                {
                                if(strcmp(a[i].cname,x)==0)
                                {
                                                printf("\nSTD Code\n%d\n",a[i].stdcode);
                                                break;
                                }
                }
                if(i==n)
                                printf("\nCity not in the list\n");
}
 
void main()
{
                char x[20];
                int n;
                n=read_file(city);
                printf("Enter city name\n");
                 gets(x);
                l_search(city,n,x);
}

 Save this data in cities.txt file


Pune 20
Delhi 11 
Mumbai 22 
Pune 20
Kolkata 33 
Chennai 44 
Hyderabad 40 
Bangalore 80 
Nashik 253
Ahmedabad 79 
Dehradun 135 
Ludhina 161 
Patiala 175 
Jaipur 141 
Jodhpur 291 
Udaipur 294 
Kalyan 251 
Vapi 260 
Surat 261 
Vadodara 265 
Jharkhand 326 
Guwahati 361 
Shillong 364 
Puducherry 413 
Tiruppur  421 
Coimbatore 422 
Erode 424 

Create the cities.txt file in the directory of linear.c then enter cities and their respective STD code.

// Run the linear.c file on Compiler

Output:

Enter city name
Mumbai

STD Code
22
----------------------------------------------------------------------------------------------------------------------------------------------

Q2.Implement a circular queue library (cir_queue.h) of integers using a 
dynamic (circular linked list) implementation of the queue and implementing 
init(Q), AddQueue(Q) and DeleteQueue(Q) operations. Write a menu driven 
program that includes queue library and calls different queue operations. 

circularqueue.c ----------
 	
#include <stdio.h>
#include <stdlib.h>
#include "slip122-circularqueue.h"
int menu()
{
int ch;
system("clear");
printf("\n\t0) Exit");
printf("\n\t1) Append");
printf("\n\t2) Delete");
printf("\n\t3) Insert");
printf("\n\t4) Display");
printf("\n\tEnter Choice : ");
scanf("%d",&ch);
return ch;
}
int main()
{
struct node *head=NULL,*end=NULL;
int ch;
while((ch=menu())!=0)
{
if(ch==1)
{
int data;
printf("\tenter data:");
scanf("%d",&data);
Append(&head,data);
}
else
if(ch==2)
{
int data;
printf("\tenter data to delete : ");
scanf("%d",&data);
if( Delete(&head,data) == 1 )
printf("\n\tDeleted");
else
printf("\n\tNot Deleted");
getchar();getchar();
}
else
if(ch==3)
{
int data,position;
printf("\tenter data to insert : ");
scanf("%d",&data);
printf("\tenter position to insert at : ");
scanf("%d",&position);
if( Insert(&head,data, position) == 1 )
printf("\n\tInserted");
else
printf("\n\tNot Inserted");
getchar();getchar();
}
else
if(ch==4)
{
Display(head);
getchar();getchar();
}
}
}

circularqueue.h

struct node
{
int data;
struct node *next;
};
struct node * Create()
{
return malloc(sizeof(struct node));
}
int isEmpty(struct node *head)
{
return (head == NULL) ? 1 : 0;
}
void Append(struct node **head, int data)
{
struct node *newnode;
newnode = Create();
newnode->data = data;
newnode->next = NULL;
if( *head==NULL )
*head = newnode;
else
{
struct node *temp = *head;
do
{
temp = temp->next;
}while(temp->next != *head );
temp->next = newnode;
}
newnode->next = *head;
}
void Display(struct node *head)
{
struct node *temp = head;
printf("\n\t[");
if( temp != NULL )
{
do
{
printf("%d,",temp->data);
temp = temp->next;
} while( temp != head );
}
printf("]");
}
int Delete(struct node **head, int data)
{
struct node *temp = *head, *prev;
if( temp != NULL )
{
do
{
if( temp->data == data )
{
if( temp->next == *head )
head = NULL;
else
if( temp == *head )
{
struct node *temp2 = *head;
while( temp2->next != *head )
temp2 = temp2->next;
temp2->next = (*head)->next;
*head = (*head)->next;
}
else
prev->next = temp->next;
free(temp);
return 1;
}
prev = temp;
temp = temp->next;
} while(temp != *head);
return 0;
}
}
int Insert(struct node **head, int data, int pos)
{
struct node *newnode;
newnode = Create();
newnode->data = data;
if( pos < 1 )
return 0;
if( pos == 1 )
{
if( *head==NULL )
{
*head = newnode;
newnode->next = *head;
return 1;
}
else
{
newnode->next = *head;
*head = newnode;
return 1;
}
}
else
if( pos > 1 )
{
struct node *temp = *head;
if( temp != NULL )
{
int i;
for(i=1; i<pos-1; ++i)
{
temp = temp->next;
if( temp == *head)
return 0;
}
newnode->next = temp->next;
temp->next = newnode;
return 1;
}
}
}