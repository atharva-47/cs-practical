Q1. Sort a random array of n integers (accept the value of n from user) in 
ascending order by using selection sort algorithm

// C program to sort the array in an
// ascending order using selection sort

#include <stdio.h>

void swap(int* xp, int* yp)
{
	int temp = *xp;
	*xp = *yp;
	*yp = temp;
}

// Function to perform Selection Sort
void selectionSort(int arr[], int n)
{
	int i, j, min_idx;

	// One by one move boundary of unsorted subarray
	for (i = 0; i < n - 1; i++) {

		// Find the minimum element in unsorted array
		min_idx = i;
		for (j = i + 1; j < n; j++)
			if (arr[j] < arr[min_idx])
				min_idx = j;

		// Swap the found minimum element
		// with the first element
		swap(&arr[min_idx], &arr[i]);
	}
}

// Function to print an array
void printArray(int arr[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		printf("%d ", arr[i]);
	printf("\n");
}

// Driver code
int main()
{
	int arr[] = { 0, 23, 14, 12, 9 };
	int n = sizeof(arr) / sizeof(arr[0]);
	printf("Original array: \n");
	printArray(arr, n);

	selectionSort(arr, n);
	printf("\nSorted array in Ascending order: \n");
	printArray(arr, n);

	return 0;
}

Output: 
Original array: 
0 23 14 12 9 

Sorted array in Ascending order: 
0 9 12 14 23

---------------------------------------------------------------------------------------------------------

Q2. There are lists where insertion should ensure the ordering of data elements. 
Since the elements are in ascending order the search can terminate once equal 
or greater element is found. Implement a doubly linked list of ordered integers
(ascending/descending) with insert, search and display operations. 
[20]

#include<stdio.h>
#include<stdlib.h>
struct node
{
int data;
struct node *next;
};
void insert(struct node **head,int data)
{
struct node *newnode;
newnode=malloc(sizeof(struct node));
newnode->data=data;
newnode->next=NULL;
if(*head==NULL)
*head=newnode;
else
{
struct node *temp=*head,*prev;
while(temp)
{
if(temp->data >=data)
{
if(temp==*head)
{
newnode->next=*head;
*head=newnode;
}
else
{
prev->next=newnode;
newnode->next=temp;
}
break;
}
else
{
prev=temp;
temp=temp->next;
}
}
if(!temp)
prev->next=newnode;
}
}
void display(struct node *temp)
{
if(!temp)
printf("\n\tEmpty list\n");
else
{
while(temp)
{
printf("\t%d ",temp->data);
temp=temp->next;
}
}
}
void search(struct node *head , int data)
{
struct node *temp= head;
int cnt=0;
while(temp && temp->data != data)
{
temp=temp->next;
cnt++;
}
if(temp)
printf("%d is at %d position\n",data,cnt);
else
printf("No data\n");
getchar();getchar();
}
int menu()
{
system("clear");
int ch;
printf("\n\t0.Exit\n\t1.Create list\n\t2.Display list\n\t3.Search node \n\tEnter your choice :");
scanf("%d",&ch);
return ch;
}
main()
{
struct node *head=NULL;
int ch;
while((ch=menu())!=0)
{
if(ch==1)
{
int i,size;
printf("How many nodes you want :");
scanf("%d",&size);
for(i=0;i<size;i++)
insert(&head,random()%100);
}
else
if(ch==2)
{
display(head);
getchar();getchar();
}
else
if(ch==3)
{
int i,node;
printf("Enter node to be searched :");
scanf("%d",&node);
search(head,node);
getchar();getchar();
}
}
}



