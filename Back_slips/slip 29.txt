Q1. Implement a stack library (ststack.h) of integers using a static 
implementation of the stack and implementing the operations like init(S), 
S=push(S), and X=peek(S). Write a driver program that includes stack library 
and calls different stack operations

#include<stdio.h>
#define MAX 15
 
char name[MAX],top;
 
void init()
{
    top=-1;
    printf("\nStatic Stack Initiaized\n");
}
 
void push()
{
    if(top==MAX-1)
    {
        printf("\nStatic Stack is full\n");
    }
    else
    {
        top++;
        printf("Enter a character to be push:");
        scanf(" %c",&name[top]);
    }
}
 
void pop()
{
    if(top==-1)
    {
        printf("\nStatic Stack is empty\n");
    }
    else
    {
        printf("Poped value is:%c",name[top]);
        top--;
    }
}
 
void peek()
{
    if(top==-1)
    {
        printf("\nStatic Stack is empty\n");
    }
    else
    {
        printf("Character at top is:%c",name[top]);
    }
}
 
isempty()
{
    if(top==-1)
    {
        printf("\nStatic Stack is empty\n");
    }
    else
    {
        printf("\nStatic Stack is not empty\n");
    }
}
 
isfull()
{
    if(top==MAX-1)
    {
        printf("\nStatic Stack is full\n");
    }
    else
    {
        printf("\nStatic Stack is not full\n");
    }
}
Save this above code in the stack library file as ststack.h

#include<stdio.h>
#include<stdlib.h>
#include "ststack.h"
int main()
{
    int ch;
    while(1)
    {
        printf("\n-----Static Stack of characters-----\n");
        printf("\n1.Init\n");
        printf("2.Push\n");
        printf("3.Pop\n");
        printf("4.Peek\n");
        printf("5.IsEmpty\n");
        printf("6.IsFull\n");
        printf("7.Exit\n");
        printf("Enter your choice: ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:init();  break;
            case 2:push(); break;
            case 3:pop(); break;
            case 4:peek(); break;
            case 5:isempty(); break;
            case 6:isfull(); break;
            case 7:exit(0);
        }
    }
}
Save this file as stack.c and compile and run the stack.c

Output: 

-----Static Stack of characters-----

1.Init
2.Push
3.Pop
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 1

Static Stack Initiaized

-----Static Stack of characters-----



------------------------------------------------------------------------------------------------------------------------------------------------

Q2. There are lists where new elements are always appended at the end of the 
list. The list can be implemented as a circular list with the external pointer 
pointing to the last element of the list. Implement singly linked circular list of 
integers with append and display operations. The operation append(L, n), 
appends to the end of the list, n integers accepted from user


#include<stdio.h>
#include<stdlib.h>
struct node
{
int data;
struct node *next;
};
void append(struct node **head,int n)
{
struct node *newnode;
newnode=malloc(sizeof(struct node));
newnode->data=n;
if(*head==NULL)
newnode->next=newnode;
else
{
newnode->next=(*head)->next;
(*head)->next=newnode;
}
*head=newnode;
}
void create(struct node ** head, int n)
{
int i,data;
struct node *newnode;
 
for(i=1;i<=n;i++)
{
printf("Element Append %d\n",i);
scanf("%d",&data);
newnode=malloc(sizeof(struct node));
newnode->data=data;
if(*head==NULL)
newnode->next=newnode;
else
{
newnode->next=(*head)->next;
(*head)->next=newnode;
}
*head=newnode;
}
}
void display(struct node *head)
{
struct node *temp = head;
do
{
printf(" %d ",temp->data);
temp=temp->next;
}while(temp!=head);
printf("\n");
}
main()
{
int n;
struct node *head=NULL;
printf("How many elements you want to Append? \n ");
scanf("%d",&n);
create(&head,n);
printf("Display the elements:\n ");
display(head);
}

Output:

How many elements you want to Append?
 6
Element Append 1
2
Element Append 2
3
Element Append 3
4
Element Append 4
4
Element Append 5
5
Element Append 6
6
Display the elements:
  6  2  3  4  4  5