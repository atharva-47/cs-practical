Q1 Implement a list library (singlylist.h) for a singly linked list. Create a linked 
list, reverse it and display reversed linked list.

#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int num;                    //Data of the node
    struct node *nextptr;       //Address of the node
}*stnode;

void createNodeList(int n);     //function to create the list
void reverseDispList();         //function to convert the list in reverse
void displayList();             //function to display the list

int main()
{
    int n;
		printf("\n\n Linked List : Create a singly linked list and print it in reverse order :\n");
		printf("------------------------------------------------------------------------------\n");
		
    printf(" Input the number of nodes : ");
    scanf("%d", &n);
    createNodeList(n);
    printf("\n Data entered in the list are : \n");		
    displayList();
    reverseDispList();
    printf("\n The list in reverse are :  \n");
    displayList();
    return 0;
}

void createNodeList(int n)
{
    struct node *fnNode, *tmp;
    int num, i;
    stnode = (struct node *)malloc(sizeof(struct node));
    if(stnode == NULL) //check whether the stnode is NULL and if so no memory allocation
    {
        printf(" Memory can not be allocated.");
    }
    else
    {
// reads data for the node through keyboard
        printf(" Input data for node 1 : ");
        scanf("%d", &num);
        stnode-> num = num;      
        stnode-> nextptr = NULL; //Links the address field to NULL
        tmp = stnode;
//Creates n nodes and adds to linked list
        for(i=2; i<=n; i++)
        {
            fnNode = (struct node *)malloc(sizeof(struct node));
            if(fnNode == NULL) //check whether the fnnode is NULL and if so no memory allocation
            {
                printf(" Memory can not be allocated.");
                break;
            }
            else
            {
                printf(" Input data for node %d : ", i);
                scanf(" %d", &num);
                fnNode->num = num;      // links the num field of fnNode with num
                fnNode->nextptr = NULL; // links the address field of fnNode with NULL
                tmp->nextptr = fnNode; // links previous node i.e. tmp to the fnNode
                tmp = tmp->nextptr;
            }
        }
    }
}

void reverseDispList()
{
    struct node *prevNode, *curNode;
 
    if(stnode != NULL)
    {
        prevNode = stnode;
        curNode = stnode->nextptr;
        stnode = stnode->nextptr;
 
        prevNode->nextptr = NULL; //convert the first node as last
 
        while(stnode != NULL)
        {
            stnode = stnode->nextptr;
            curNode->nextptr = prevNode;
 
            prevNode = curNode;
            curNode = stnode;
        }
        stnode = prevNode; //convert the last node as head
    }
}

void displayList()
{
    struct node *tmp;
    if(stnode == NULL)
    {
        printf(" No data found in the list.");
    }
    else
    {
        tmp = stnode;
        while(tmp != NULL)
        {
            printf(" Data = %d\n", tmp->num);   // prints the data of current node
            tmp = tmp->nextptr;                 // advances the position of current node
        }
    }
}


Linked List : Create a singly linked list and print it in reverse order :                                    
------------------------------------------------------------------------------                                
 Input the number of nodes : 3                                                                                
 Input data for node 1 : 5                                                                                    
 Input data for node 2 : 6                                                                                    
 Input data for node 3 : 7                                                                                    
                                                                                                              
 Data entered in the list are :                                                                               
 Data = 5                                                                                                     
 Data = 6                                                                                                     
 Data = 7                                                                                                     
                                                                                                              
 The list in reverse are :                                                                                    
 Data = 7                                                                                                     
 Data = 6                                                                                                     
 Data = 5


------------------------------------------------------------------------------------------------------------------------------------------------

Q2 Write a program that copies the contents of one stack into another. Use stack 
library to perform basic stack operations. The order of two stacks must be 
identical.(Hint: Use a temporary stack to preserve the order).

 
#include <stdio.h>

char s[20];
int top;

void init()
{
	top=-1;
}

int isempty()
{
	if(top==-1)
	return 1;
	else
	return 0;
}

int isfull()
{
	if(top==19)
	return 1;
	else
	return 0;
}

void push(char ch)
{
	if(isfull()==1)
	printf("stack is full");
	else
	{
		top++;
		s[top]=ch;
	}
}

char pop()
{
	char ch;
	if(isempty()==1)
	printf("stack is empty");
	else
	{
		ch=s[top];
		top--;
	}
	return ch;
}

main()
{
	int i,k=0;
	char temp[20];
	init();
	char str[20];
	printf("enter string ");
	scanf("%s",str);
	for(i=0;str[i]!='\0';i++)
	{
		push(str[i]);
	}
	while(!isempty())
	{
		temp[k]=pop();
		k++;
	}
	temp[k]='\0';
	//Again String push into stack
	printf("second string :");
	for(i=0;temp[i]!='\0';i++)
	{
		push(temp[i]);
	}
	while(!isempty())
	{
		printf("%c",pop());
	}
}