Q1. Sort a random array of n integers (accept the value of n from user) in 
ascending order by using Selection sort algorithm 


#include <stdio.h>
 
void swap(int* xp, int* yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}
 
// Function to perform Selection Sort
void selectionSort(int arr[], int n)
{
    int i, j, min_idx;
 
    // One by one move boundary of unsorted subarray
    for (i = 0; i < n - 1; i++) {
 
        // Find the minimum element in unsorted array
        min_idx = i;
        for (j = i + 1; j < n; j++)
            if (arr[j] < arr[min_idx])
                min_idx = j;
 
        // Swap the found minimum element
        // with the first element
        swap(&arr[min_idx], &arr[i]);
    }
}
 
// Function to print an array
void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
 
// Driver code
int main()
{
    int arr[] = { 0, 23, 14, 12, 9 };
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Original array: \n");
    printArray(arr, n);
 
    selectionSort(arr, n);
    printf("\nSorted array in Ascending order: \n");
    printArray(arr, n);
 
    return 0;
}

Output: 
Original array: 
0 23 14 12 9 

Sorted array in Ascending order: 
0 9 12 14 23

------------------------------------------------------------------------------------------------------------------------------------------------

Q2. Write a program that multiply two single variable polynomials. Each 
polynomial should be represented as a list with linked list implementation


#include<stdio.h>
#include<stdlib.h>

struct node
{
	int coeff,exp;
	struct node *next;
};

struct node* create(struct node *f)
{
	int i,n;
	struct node *s;
	printf("\nEnter no of terms ");
	scanf("%d",&n);
	printf("Enter term in descending order of power ");
	f=(struct node *)malloc(sizeof(struct node));
	printf("\n Enter coeff ");
	scanf("%d",&f->coeff);
	printf("\n Enter power ");
	scanf("%d",&f->exp);
	s=f;
	for(i=1;i<n;i++)
	{
		s->next=(struct node *)malloc(sizeof(struct node));
		s=s->next;
		printf("\n Enter coeff ");
		scanf("%d",&s->coeff);
		printf("\n Enter power ");
		scanf("%d",&s->exp);
	}
	s->next=NULL;
	return f;
}

void display(struct node *f)
{ 
	struct node *s;
	for(s=f;s!=NULL;s=s->next)
	{ 
		printf("%dx^%d ->",s->coeff,s->exp);
	}
}

int length(struct node *p)
{ 
	int len=0;
	struct node *s;
	for(s=p;s!=NULL;s=s->next)
	{ 
		len++;
	}
	return len;
}

struct node* Mult(struct node *p1,struct node *p2)
{
	struct node *t1,*t2,*t3=NULL,*nw;
	struct node *p3;
	for(t1=p1;t1!=NULL;t1=t1->next)
	{
		for(t2=p2;t2!=NULL;t2=t2->next)
		{
			nw=(struct node*)malloc(sizeof(struct node));
			nw->next=NULL;
			nw->coeff=t1->coeff*t2->coeff;
			nw->exp=t1->exp+t2->exp;
			if(t3==NULL)
			{ 
				p3=nw;
				t3=nw;
			}
			else
			{ 
				t3->next=nw;
				t3=t3->next;
			}
		}
	}
	return p3;
}

main()
{ 
	struct node *p1=NULL,*p2=NULL,*p3=NULL;
	p1=create(p1);
	p2=create(p2);
	printf("\n 1st Polynomial is : ");
	display(p1);
	printf("\n 2nd Polynomial is : ");
	display(p2);
	p3=Mult(p1,p2);
	printf("\n Multiplication of 2 Polynomial is ");
	display(p3);
}