Q1. Read the data from the file “employee.txt” and sort on names in 
alphabetical order (use strcmp) using bubble sort

#include<stdio.h>
typedef struct employee
{
  char name[10];
  int age;
}record;
record emp[10];
int readfile(record a[])
{
  int i=0;
  FILE *fp;
  if((fp=fopen("emp.txt",r))!=NULL)
  {
    while(!feof(fp))
    {
       fscanf(fp,"%d%s",&a[i].age,a[i].name);
       i++;
    }
  }
return (i-1);
}
void writefile(record a[],int n)
{
  int i=0;
  FILE *fp;
  if((fp=fopen("sorted_emp_on_name_bubble.txt","w+"))!=NULL)
  {
     for(i=0;i<n;i++)
      fprint(fp,"%d %s\n",a[i].age,a[i].name);
  }
}

void bubble_sort (record a[],int n)
{
  int i,j;
  record t;
  for(i=1;i<n;i++)
  {
   for(j=0;j<n;j++)
   {
     if(strcmp(a[j].name,a[j+1].name)>=0)
      {
        t=a[j];
        a[j]=a[j+1];
       a[j+1]=t;
      }
    }
  }
}
main()
{
   int i;
   n=readfile(emp);
   bubble_sort(emp,n);
   writefile(emp,n);
}

-----------------------------------------------------------------------------------------------------------------------------------------------

Q2. Write a program that merges two ordered linked lists into third new list. 
When two lists are merged the data in the resulting list are also ordered. The 
two original lists should be left unchanged. That is merged list should be new 
one. Use linked implementation.


#include<stdio.h>
struct node
{
int data;
struct node *next;
};
struct node* create();
void display(struct node*);
struct node* create()
{ int n,i;
struct node *s,*f;
printf("Enter how many nodes ");
scanf("%d",&n);
f= (struct node *)malloc(sizeof(struct node));
printf("Enter data ");
scanf("%d",&f->data);
s=f;
for(i=1;i<n;i++)
{
s->next=(struct node*)malloc(sizeof(struct node));
s=s->next;
printf("Enter data ");
scanf("%d",&s->data);
}
s->next=NULL;
return f;
}
void display(struct node *f)
{ struct node *s;
for(s=f;s!=NULL;s=s->next)
{
printf("| %d |-> ",s->data);
}
}
struct node* merge(struct node *f1,struct node *f2)
{ struct node *s;
for(s=f1;s->next!=NULL;s=s->next)
{
}
s->next=f2;
return f1;
}
main()
{
struct node *f1,*f2,*f3;
f1=create();
f2=create();
printf("1st linked list ");
display(f1);
printf("\n2nd linked list ");
display(f2);
f3=merge(f1,f2) ;
printf("\nAfter merging LL is ");
display(f3);
}
