Q1. Implement a linear queue library (st_queue.h) of integers using a static 
implementation of the queue and implementing the init(Q), add(Q) and peek(Q) 
operations. Write a program that includes queue library and calls different 
queue operations

#include<stdio.h>
#define MAX 3
int a[MAX],front,rear;
 
void init()
{
    front=-1;
    rear=-1;
    printf("\nStatic Queue is initialized\n");
}
 
void insert()
{
    int number;
    if(rear==MAX-1)
        printf("\nQueue is full\n");
    else
    {
        printf("\nEnter the value:");
        scanf("%d",&number);
        front=0;
        rear=rear+1;
        a[rear]=number; 
        printf("\nValue Enqueued\n");
    }
}
 
void delete1()
{
    if(front==-1 || rear==front-1)
        printf("\nQueue is empty\n");
    else
    {
        printf("\nDeleted value is %d",a[front]);   
        front=front+1;
    }
}
 
void isfull()
{
    if(rear==MAX-1)
        printf("\nQueue is full\n");
    else
        printf("\nQueue is not full");  
}
 
void isempty()
{
    if(front==-1 || rear==front-1)
        printf("\nQueue is empty\n");
    else
        printf("\nQueue is not empty"); 
}
 
void peek()
{
    if(front==-1 || rear==front-1)
        printf("\nQueue is empty\n");
    else
        printf("\nValue at front is %d",a[front]);  
}



Save this above code in the stack library file as stqueue.h

#include<stdio.h>
#include<stdlib.h>
#include "stqueue.h"
int main()
{
    int ch;
    while(1)
    {
        printf("\n----Static Queue----\n");
        printf("\n1.Init\n");
        printf("2.Insert\n");
        printf("3.Delete\n");
        printf("4.Peek\n");
        printf("5.IsEmpty\n");
        printf("6.IsFull\n");
        printf("7.Exit\n");
        printf("Enter your choice: ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:init();  break;
            case 2:insert(); break;
            case 3:delete1(); break;
            case 4:peek(); break;
            case 5:isempty(); break;
            case 6:isfull(); break;
            case 7:exit(0);
        }
    }
}


Save this file as queue.c and compile and run the queue.c

Output:
----Static Queue----

1.Init
2.Insert
3.Delete
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 1

Static Queue is initialized

----Static Queue----

1.Init
2.Insert
3.Delete
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 2

Enter the value:10

Value Enqueued

----Static Queue----

1.Init
2.Insert
3.Delete
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 3

Deleted value is 10

----Static Queue----

1.Init
2.Insert
3.Delete
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 4

Queue is empty

----Static Queue----

1.Init
2.Insert
3.Delete
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 6

Queue is not full
----Static Queue----

1.Init
2.Insert
3.Delete
4.Peek
5.IsEmpty
6.IsFull
7.Exit
Enter your choice: 7
-----------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
Q2. Read the data from the file “employee.txt” and sort on names in 
alphabetical order (use strcmp) using bubble sort and selection sort.

employee.txt---

Chetali
Priya
Suresh
Ajay
Danish
Ramesh
---------------

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct employee
{
char name[20];
};
void bubble(struct employee *emp,int n)
{
int i,j;
for(i=0;i<n-1;i++)
{
for(j=0;j<n-i-1;j++)
{
struct employee temp;
if(strcmp(emp[j].name, emp[j+1].name) > 0)
{
temp = emp[j+1];
emp[j+1]=emp[j];
emp[j]=temp;
}
}
}
}
void main()
{
struct employee *emp=NULL,temp;
FILE *fp;
int i,j,n;
char name[20];
fp=fopen("slip102-employee.txt","r");
while(fscanf(fp,"%s",name)!=EOF)
n++;
emp=malloc(sizeof(struct employee)*n);
n=0;
rewind(fp);
while(fscanf(fp,"%s",emp[n].name)!=EOF)
n++;
fclose(fp);
bubble(emp,n);
fp=fopen("slip102-employee.txt","w");
for(i=0;i<n;i++)
fprintf(fp,"%s\n",emp[i].name);
fclose(fp);
}
